const asyncHandler = require("express-async-handler");
const paginate = require("../utils/paginate-sequelize");
const MyError = require("../utils/myError");
const bcrypt = require("bcrypt");
const { sendHtmlEmail } = require("../middleware/email");

// =====================
//  –ë“Ø—Ö —Ö–∞—Ä–∏–ª—Ü–∞–≥—á –∂–∞–≥—Å–∞–∞—Ö
// =====================
exports.getClients = asyncHandler(async (req, res, next) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 100;
  const sort = req.query.sort;
  let select = req.query.select;

  if (select) select = select.split(" ");
  ["select", "sort", "page", "limit"].forEach((el) => delete req.query[el]);

  const pagination = await paginate(page, limit, req.db.clients);
  let query = { offset: pagination.start - 1, limit };

  if (req.query) query.where = req.query;
  if (select) query.attributes = select;
  if (sort) {
    query.order = sort.split(" ").map((el) => [
      el.charAt(0) === "-" ? el.substring(1) : el,
      el.charAt(0) === "-" ? "DESC" : "ASC",
    ]);
  }

  const clients = await req.db.clients.findAll(query);
  res.status(200).json({
    success: true,
    body: {
      items: clients,
      pagination
    },
  });
});
exports.getClient = asyncHandler(async (req, res, next) => {
    const { id } = req.params;
    const clients = await req.db.clients.findByPk(id,{
      include: [{
      model: req.db.orders,
      as: "orders",
      // include: {
      //   model: req.db.order,
      //   as: "product",
      // },
    }]
    });
    if (!clients) {
        throw new MyError(`${id}  –¥—É–≥–∞–∞—Ä—Ç–∞–π –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –æ–ª–¥—Å–æ–Ω–≥“Ø–π`, 404)
    }
    res.status(200).json({
        success: true,
        body: clients,
    });
});
// =====================
//  –ë“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö (Sign Up)
// =====================
exports.signUp = asyncHandler(async (req, res, next) => {
  const client = await req.db.clients.create({ ...req.body });
  if (!client) throw new MyError("–ë“Ø—Ä—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª–ª–æ–æ", 400);

  const emailBody = {
    title: "–¶–∞—Ö–∏–º –º–µ–Ω—é —Å–∏—Å—Ç–µ–º",
    label: `–¢–∞–Ω—ã –±“Ø—Ä—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–ª—ç—ç üëè`,
    email: req.body.email,
    from: "–°–∏—Å—Ç–µ–º–∏–π–Ω –ê–¥–º–∏–Ω",
    buttonText: "–°–∏—Å—Ç–µ–º —Ä“Ø“Ø –Ω—ç–≤—Ç—Ä—ç—Ö",
    buttonUrl: process.env.WEBSITE_URL,
    greeting: "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É?",
  };
  await sendHtmlEmail({ ...emailBody });

  res.status(200).json({
    message: "–ê–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç.",
    body: { token: client.getJsonWebToken(), client },
  });
});

// =====================
//  –ù—ç–≤—Ç—Ä—ç—Ö (Sign In)
// =====================
exports.signIn = asyncHandler(async (req, res, next) => {
  const { email, password } = req.body;
  if (!email || !password)
    throw new MyError("–ò–º—ç–π–ª –±–æ–ª–æ–Ω –Ω—É—É—Ü “Ø–≥—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É", 400);

  const client = await req.db.clients.findOne({ where: { email } });
  if (!client) throw new MyError("–ò–º—ç–π–ª —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞", 400);

  const ok = await client.CheckPass(password);
  if (!ok) throw new MyError("–ò–º—ç–π–ª —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞", 400);

  res.status(200).json({
    message: "–ê–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–≤—Ç—ç—Ä–ª—ç—ç",
    body: { token: client.getJsonWebToken(), client },
  });
});

// =====================
//  –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª
// =====================
exports.clientInfo = asyncHandler(async (req, res, next) => {
  const { userId } = req;
  const client = await req.db.clients.findByPk(userId);
  if (!client) throw new MyError("–¢–∞–Ω—ã –±“Ø—Ä—Ç–≥—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π", 404);

  res.status(200).json({
    message: "Success",
    body: client,
  });
});

// =====================
//  –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö
// =====================
exports.updateClientInfo = asyncHandler(async (req, res, next) => {
  const { userId } = req;
  if (req.body.password) delete req.body.password;

  await req.db.clients.update(req.body, { where: { id: userId } });

  res.status(200).json({
    message: "–¢–∞–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç.",
    body: { success: true },
  });
});

// =====================
//  –•—ç—Ä—ç–≥–ª—ç–≥—á —É—Å—Ç–≥–∞—Ö
// =====================
exports.removeClient = asyncHandler(async (req, res, next) => {
  const clientId = req.params.id;
  const client = await req.db.clients.findByPk(clientId);
  if (!client)
    throw new MyError(`ID ${clientId} –¥—É–≥–∞–∞—Ä—Ç–∞–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π`, 404);

  await client.destroy();

  res.status(200).json({
    message: "–•—ç—Ä—ç–≥–ª—ç–≥—á —É—Å—Ç–≥–∞–≥–¥–ª–∞–∞.",
    body: { success: true },
  });
});

// =====================
//  –ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö
// =====================
exports.changePassword = asyncHandler(async (req, res, next) => {
  const id = req.userId;
  if (!id) throw new MyError("ID –æ–ª–¥—Å–æ–Ω–≥“Ø–π", 400);

  const newPassword = req.body.password;
  const salt = await bcrypt.genSalt(10);
  const hashed = await bcrypt.hash(newPassword, salt);

  await req.db.clients.update({ password: hashed }, { where: { id } });

  const emailBody = {
    title: "–¶–∞—Ö–∏–º –º–µ–Ω—é —Å–∏—Å—Ç–µ–º",
    label: `–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç üîê`,
    email: req.email,
    from: "–°–∏—Å—Ç–µ–º–∏–π–Ω –ê–¥–º–∏–Ω",
    buttonText: "–°–∏—Å—Ç–µ–º —Ä“Ø“Ø –æ—á–∏—Ö",
    buttonUrl: process.env.WEBSITE_URL,
    greeting: "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É?",
  };
  await sendHtmlEmail({ ...emailBody });

  res.status(200).json({
    message: "–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç",
    body: { success: true },
  });
});
